@page "/mealGen"
@using System.Net.Http.Headers;
@using OrganizerBlazor.Auth.Service;
@using OrganizerBlazor.Cookbook.Models.CookBookDTO;
@using OrganizerBlazor.Cookbook.Models;
@using OrganizerBlazor.Cookbook.CookbookPages.CookBookComponents

@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IAuthUtils authUtils
@attribute [Authorize]

<div class="container mt-3">

    @if(errorMessage != "")
    {
        <!-- Error Message -->
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <!-- Meal Planner Information -->
    <div class="mb-3">
        <h2>Meal plan generator</h2>
        <p>Select how many Recipes you want to generate from your own cookbook:</p>
    </div>

    <!-- Selection Buttons -->
    <div class="btn-group mb-3" role="group">
        <button class="btn btn-primary @(RandomBoxDisplaying ? "active" : "")" @onclick="() => RandomBoxDisplaying = true">Random</button>
        <button class="btn btn-secondary @(RandomBoxDisplaying ? "" : "active")" @onclick="() => { RandomBoxDisplaying = false; getCookbookRecipeNamesFromBackend(); }">Specific</button>
    </div>

    <!-- Random Meal Input Box -->
    @if (RandomBoxDisplaying)
    {
        <div class="mb-3">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-primary" @onclick="addRecipeToList">Add</button>
                <button class="btn btn-outline-secondary" @onclick="removeRecipeFromList">Remove</button>
            </div>

            <form @onsubmit="SubmitMealPlanner">
                <div>
                    @for (int i = 0; i < recipeRequests.Count; i++)
                    {
                        <RecipeRequestBoxComp RecipeRequest="recipeRequests[i]" />
                    }
                </div>
                <button type="submit" class="btn btn-success mt-2">Generate</button>
            </form>
        </div>
    }else
    {
        <div class="mb-3">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-primary" @onclick="addSpecificRecipeReq">Add</button>
                <button class="btn btn-outline-secondary" @onclick="removeSpecificRecipeReq">Remove</button>
            </div>
            <form @onsubmit="SubmitSpecificPlan">
                <div>
                    @if (cookbookRecipeNames != null)
                    {
                        foreach (var recipeReq in specificRecipeRequests)
                        {
                            <RecipeSpecificRequestGenerator MealTypes="cookbookRecipeNames" RecipeRequest="recipeReq" />
                        }
                    }
                    else
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <h3 class="mt-2">Generating...</h3>
                        </div>
                    }
                </div>
                <button type="submit" class="btn btn-success mt-2">Generate</button>
            </form>
        </div>
    }

    <!-- Meal Plan Box -->
    @if (MealPlannedRecipes != null)
    {
        foreach (var recipe in MealPlannedRecipes)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <h5 class="card-title">@recipe.RecipeName</h5>
                            <p class="card-text">@recipe.Description</p>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-danger float-right" @onclick="() => RemovePlannedRecipe(recipe.RecipeName)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    @if (MealGeneratorLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h3 class="mt-2">Generating...</h3>
        </div>
    }

    @if (MealPlannedRecipes != null)
    {
        <div class="mt-3">
            <p>If you are satisfied with the generated meals, you can create a shopping list based on selected recipes.</p>
            <button class="btn btn-info" @onclick=SubmitToShoppingList>Generate shopping list</button>
        </div>
    }

    <div class="container mt-3">
        @if (SavedShoppingList != null)
        {
            <h3>Shopping list</h3>
            @foreach (var recipe in SavedShoppingList)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h4 class="card-title">@recipe.RecipeName</h4>
                        <ul class="list-group list-group-flush">
                            @foreach (var ingredient in recipe.Ingredients)
                            {
                                <li class="list-group-item">@ingredient.Name - @ingredient.Quantity @ingredient.Unit</li>
                            }
                        </ul>
                    </div>
                </div>
            }
            <button class="btn btn-primary" @onclick="SaveShoppingListBackend">Add to shopping list</button>
        }

        @if (ShoppingListLoading)
        {
            <div class="text-center mt-3">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h3 class="mt-2">Generating...</h3>
            </div>
        }
    </div>


</div>

@code {

    private string errorMessage = "";
    private List<Recipe>? MealPlannedRecipes;
    private List<ShoppingListRecipeDetails>? SavedShoppingList;
    Dictionary<string, List<SpecificRecipeGen>>? cookbookRecipeNames;

    private bool MealGeneratorLoading = false;
    private bool ShoppingListLoading = false;
    private bool RandomBoxDisplaying = true;
    private bool randomMealsWanted = true;

    private List<SpecificRecipeRequest> specificRecipeRequests = new List<SpecificRecipeRequest>()
    {
        new SpecificRecipeRequest()
    };

    private List<RecipeRequestEasyDTO> recipeRequests = new List<RecipeRequestEasyDTO>()
    {
        new RecipeRequestEasyDTO()
    };

    private async void SubmitMealPlanner()
    {
        if (SavedShoppingList != null) SavedShoppingList = null;
        if (MealPlannedRecipes != null) MealPlannedRecipes = null;
        MealGeneratorLoading = true;
        randomMealsWanted = true;

        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);
            var response = await Http.PostAsJsonAsync("meal/easy", recipeRequests);

            if (!response.IsSuccessStatusCode)
            {

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // If the status code is 401, clear the credentials and redirect.
                    await authUtils.RemoveCredentialsAsync();
                    return;
                }
                MealGeneratorLoading = false;
                //show error message
                errorMessage = "check console log for error message!";
                return;
            }

            var recipes = await response.Content.ReadFromJsonAsync<List<Recipe>>();

            if(recipes.Count == 0)
            {
                errorMessage = "no recipies fit requirements!";
                return;
            }

            MealPlannedRecipes = recipes;
            errorMessage = "";
            MealGeneratorLoading = false;
            StateHasChanged();


        }catch(Exception e)
        {
            Console.WriteLine("im in catch!");
            Console.WriteLine(e.Message);
        }


    }

    private void RemovePlannedRecipe(string recipeToRemove)
    {
        MealPlannedRecipes = MealPlannedRecipes.Where(recipe => recipe.RecipeName != recipeToRemove).ToList();
    }

    private void addRecipeToList()
    {
        if(recipeRequests.Count >= 10) errorMessage = "Max amount of requests added!";
        else recipeRequests.Add(new RecipeRequestEasyDTO());
    }

    private void removeRecipeFromList()
    {
        if (recipeRequests.Count > 1) {
            recipeRequests.RemoveAt(recipeRequests.Count - 1); 
            if (errorMessage == "Max amount of requests added!") errorMessage = "";
        }
    }

    private List<ShoppingListDetailsDTO> CreateShoppingList()
    {
        List<ShoppingListDetailsDTO> shoppingListRecipesWanted = new List<ShoppingListDetailsDTO>();
        if (MealPlannedRecipes != null || MealPlannedRecipes.Count != 0)
        {
            if (randomMealsWanted)
            {
                int portionsAmounts = 0;
                foreach(var recipe in MealPlannedRecipes)
                {
                    shoppingListRecipesWanted.Add(new ShoppingListDetailsDTO()
                    {
                            RecipeName = recipe.RecipeName,
                            PortionsAmount = recipeRequests[portionsAmounts].portions
                    });

                    portionsAmounts++;
                }
            }
            else
            {
                int portionsAmounts = 0;
                foreach(var recipe in specificRecipeRequests)
                {
                    shoppingListRecipesWanted.Add(new ShoppingListDetailsDTO()
                        {
                            RecipeName = recipe.Name,
                            PortionsAmount = specificRecipeRequests[portionsAmounts].Portions
                        });

                    portionsAmounts++;
                }
            }
        }

        return shoppingListRecipesWanted;
    }

    private async void SubmitToShoppingList()
    {
        if (SavedShoppingList != null) SavedShoppingList = null;
        ShoppingListLoading = true;
        var shoppingListInfo = CreateShoppingList();
        //Console.WriteLine(shoppingListInfo.Count);

        //do the api call
        try
        {
            var response = await Http.PostAsJsonAsync("shoppinglist/create-shoppinglist", shoppingListInfo);
            if (!response.IsSuccessStatusCode)
            {
                //show error message
                errorMessage = "check console log for error message!";
                Console.WriteLine(response);
                return;
            }

            var shoppingList = await response.Content.ReadFromJsonAsync<List<ShoppingListRecipeDetails>>();

            SavedShoppingList = shoppingList;
            ShoppingListLoading = false;
            StateHasChanged();

        }catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async void SubmitSpecificPlan()
    {
        // run create specific
        if (SavedShoppingList != null) SavedShoppingList = null;
        if (MealPlannedRecipes != null) MealPlannedRecipes = null;
        randomMealsWanted = false;
        ShoppingListLoading = true;

        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

            var response = await Http.PostAsJsonAsync("meal/specific", specificRecipeRequests);

            if (!response.IsSuccessStatusCode)
            {
                MealGeneratorLoading = false;
                //show error message
                errorMessage = "check console log for error message!";
                Console.WriteLine(response);
                return;
            }

            var recipes = await response.Content.ReadFromJsonAsync<List<Recipe>>();

            if (recipes.Count == 0)
            {
                errorMessage = "no recipies fit requirements!";
                StateHasChanged();
                return;
            }

            MealPlannedRecipes = recipes;
            SubmitToShoppingList();
            MealPlannedRecipes = null;
            errorMessage = "";
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine("im in catch!");
            Console.WriteLine(e.Message);
        }
    }

    private async void getCookbookRecipeNamesFromBackend()
    {
        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);
            cookbookRecipeNames = await Http.GetFromJsonAsync<Dictionary<string, List<SpecificRecipeGen>>>("meal/specific-Meal-Gen-Recipe-Details");
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void addSpecificRecipeReq()
    {
        specificRecipeRequests.Add(new SpecificRecipeRequest());
    }

    private void removeSpecificRecipeReq()
    {   
        if (specificRecipeRequests.Count > 1)
        {
            specificRecipeRequests.RemoveAt(specificRecipeRequests.Count - 1);
        }
    }

    private void ToggleSelection()
    {
        RandomBoxDisplaying = !RandomBoxDisplaying;
    }

    private async void SaveShoppingListBackend()
    {

        ShoppingListLoading = true;

        SingleShopList shopList = new SingleShopList()
        {
            ListName = "Shopping list",
        };

        //run through and create recipe objects to add to the list
        foreach(var recipe in SavedShoppingList)
        {
            SingleShopListRecipe addingRecipe = new SingleShopListRecipe();
            addingRecipe.RecipeName = recipe.RecipeName;
            addingRecipe.Ingredients = recipe.Ingredients;
            shopList.SingleShopListRecipes.Add(addingRecipe);
        }

        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

            var response = await Http.PostAsJsonAsync("shoppinglist/add-to-shoppinglist", shopList);

            if (!response.IsSuccessStatusCode)
            {
                MealGeneratorLoading = false;
                //show error message
                errorMessage = "check console log for error message!";
                Console.WriteLine(response);
                return;
            }
            else NavigationManager.NavigateTo("/shoppinglistpage");
        }
        catch (Exception e)
        {
            Console.WriteLine("im in catch!");
            Console.WriteLine(e.Message);
        }
    }

}
