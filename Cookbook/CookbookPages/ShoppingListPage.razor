@page "/shoppinglistpage";
@using OrganizerBlazor.Auth.Service;
@using OrganizerBlazor.Cookbook.Models.CookBookDTO;
@using System.Net.Http.Headers;
@using OrganizerBlazor.Cookbook.Models;

@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IAuthUtils authUtils
@attribute [Authorize]

<div class="container mt-4">
    @if (LoadingData)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h3>Loading shopping list...</h3>
        </div>
    }
    else
    {
        <div class="row">
            <div class="d-flex justify-content-between align-items-center mb-5">
                <h3>Shopping List</h3>
                <button class="btn btn-success" @onclick="SaveShoppingListToBackend">Save Shopping List</button>
            </div>
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body">
                        @if (shoppingList.SingleShopListRecipes.Count > 0 || shoppingList.AdditionalItems.Count > 0)
                        {
                            <div class="btn-group d-flex mb-3" role="group" aria-label="List options">
                                <button class="btn btn-primary btn-block" @onclick="ShowSeparatedList">Separated</button>
                                <button class="btn btn-success btn-block" @onclick="ShowMergedShoppingList">Merged</button>
                            </div>
                        }

                        @if (!ShowMergedList)
                        {
                            @if (shoppingList.SingleShopListRecipes.Count > 0 || shoppingList.AdditionalItems.Count > 0)
                            {
                                @foreach (var recipeShoppingData in shoppingList.SingleShopListRecipes)
                                {
                                    <div class="mb-2 d-flex justify-content-between align-items-center">
                                        <h4>@recipeShoppingData.RecipeName</h4>
                                        <button class="btn btn-danger btn-sm" @onclick="() => {RemoveWholeRecipeFromShoppingList(recipeShoppingData.RecipeName);}">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </div>
                                    <ul class="list-group">
                                        @foreach (var ingredient in recipeShoppingData.Ingredients)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="@("checkbox_" + ingredient.Guid)" checked="@ingredient.Finished" @onchange="() => ToggleCompletedIngredient(ingredient)">
                                                    <label class="form-check-label" for="@("checkbox_" + ingredient.Guid)">
                                                        @ingredient.Name - @ingredient.Quantity @ingredient.Unit
                                                    </label>
                                                </div>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveIngredient(ingredient.Guid.ToString())">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                }
                                @if (shoppingList.AdditionalItems != null && shoppingList.AdditionalItems.Count > 0)
                                {
                                    <div class="mb-3">
                                        <h5>Extra</h5>
                                        <ul class="list-group">
                                            @foreach (var item in shoppingList.AdditionalItems)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" id="@("checkbox_" + item.Name)" checked="@item.Completed" @onchange="() => ToggleAdditionalCompleted(item)">
                                                        <label class="form-check-label" for="@("checkbox_" + item.Name)">
                                                            @item.Name
                                                        </label>
                                                    </div>
                                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveAdditionalItem(item)" @onclick:stopPropagation="true">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="mb-3">
                                    <h5>Shopping list is empty!</h5>
                                </div>
                            }
                        }
                        else
                        {
                            <ul class="list-group">
                                @foreach (var item in mergedList.Ingredients)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="@("checkbox_" + item.Guid)" checked="@item.Finished" @onchange="() => ToggleCompletedMergedIngredient(item.Name)">
                                            <label class="form-check-label" for="@("checkbox_" + item.Guid)">
                                                @item.Name
                                            </label>
                                        </div>
                                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveIngredientFromMerged(item.Name)" @onclick:stopPropagation="true">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </li>
                                }

                                <!-- For mergedList.ExtraItems -->
                                @foreach (var item in mergedList.ExtraItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="@("checkbox_" + item.Name)" checked="@item.Completed" @onchange="() => ToggleCompletedMergedExtraItem(item.Name)">
                                            <label class="form-check-label" for="@("checkbox_" + item.Name)">
                                                @item.Name
                                            </label>
                                        </div>
                                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveItemFromMerged(item.Name)" @onclick:stopPropagation="true">
                                            <i class="bi bi-x"></i>
                                        </button>
                                    </li>
                                }
                            </ul>
                        }

                        <div class="input-group mt-3">
                            <input type="text" class="form-control" placeholder="Item name" @bind="currentItemName">
                            <button class="btn btn-outline-secondary" @onclick="AddItemToList">Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                @if (earlierAddedITems != null && earlierAddedITems.Count > 0)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h4 class="card-title">History</h4>
                            <ul class="list-group">
                                @foreach (var item in earlierAddedITems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @item
                                        <span>
                                            <button class="btn btn-primary btn-sm" @onclick="() => AddEarlierItemToShoppingList(item)">Add</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveItemFromAdditionalList(item)">🗑️</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }

                @if (recommendedItems.Count > 0)
                {
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title">Recommended</h4>
                            <ul class="list-group">
                                @foreach (var recItem in recommendedItems)
                                {
                                    <li class="list-group-item" @onclick="() => AddEarlierItemToShoppingList(recItem)">
                                        @recItem
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {

    private bool LoadingData = true;
    private List<string>? earlierAddedITems = new();
    private string currentItemName;
    private SingleShopList? shoppingList = new();
    private List<string> recommendedItems = new();
    private MergedIngredientList mergedList = new();
    private bool ShowMergedList = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        getShoppingListFromBackend();

    }

    private async void getShoppingListFromBackend()
    {
        mergedList.ExtraItems.Clear();
        mergedList.Ingredients.Clear();
        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

            var response = await Http.GetAsync("shoppinglist/get-shoppinglist");

            if (!response.IsSuccessStatusCode)
            {
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // If the status code is 401, clear the credentials and redirect.
                    await authUtils.RemoveCredentialsAsync();
                    return;
                }
                // Handle other non-success status codes appropriately
                return;
            }

            var shoppingListData = await response.Content.ReadFromJsonAsync<ShoppingListPageDTO>();
            if (shoppingListData.SingleShopList != null && shoppingListData.AdditionalItems != null)
            {
                shoppingList = shoppingListData.SingleShopList;
                earlierAddedITems = shoppingListData.AdditionalItems;
                recommendedItems = shoppingListData.RecommendedAdditionalItems;
            }

        }
        catch (Exception e)
        {
            // Handle any exceptions here
            Console.WriteLine($"Exception in getShoppingListFromBackend: {e.Message}");
        }
        finally
        {
            LoadingData = false;
            StateHasChanged();
        }
    }

    private void AddItemToList()
    {

        //check if iten name already exists
        bool alreadyExistsInList = shoppingList.AdditionalItems.Any(item => item.Name == currentItemName);
        if (!alreadyExistsInList)
        {
            AdditionalFoodCurrentItem newExtraItem = new()
            {
                Name = currentItemName
            };
            shoppingList.AdditionalItems.Add(newExtraItem);

        }

        bool existsInEarlierList = earlierAddedITems.Contains(currentItemName);
        if (!existsInEarlierList)
        {
            earlierAddedITems.Add(currentItemName);
        }
        currentItemName = "";
    }

    private void RemoveIngredient(string ingredientGuid)
    {

        SingleShopListRecipe recipeToRemove = null;
        // i can search directly on ingredient id since theres slim to no chance of duplicates
        foreach (var recipe in shoppingList.SingleShopListRecipes)
        {
            var ingredientToRemove = recipe.Ingredients.FirstOrDefault(ingr => ingr.Guid.ToString() == ingredientGuid);
            if (ingredientToRemove != null)
            {
                recipe.Ingredients.Remove(ingredientToRemove);
                if (recipe.Ingredients.Count == 0)
                {
                    recipeToRemove = recipe;
                }
                break; // If you only expect one ingredient with this Guid, you can break the loop once found.
            }
        }

        if (recipeToRemove != null)
        {
            shoppingList.SingleShopListRecipes.Remove(recipeToRemove);
        }

        // Optionally remove the ingredient from the strikedIngredients as well
    }

    private void RemoveAdditionalItem(AdditionalFoodCurrentItem item)
    {
        shoppingList.AdditionalItems.Remove(item);

        //addtional items can only exist one instance in list, so remove from merged at the same time
        mergedList.ExtraItems.RemoveAll(ingr => ingr.Name == item.Name);
    }

    private void RemoveIngredientFromMerged(string ingredientName)
    {
        mergedList.Ingredients.RemoveAll(ingredient => ingredient.Name.Equals(ingredientName));

        //get the name only, since ingredientName is concated with all amounts from merged list
        var ingrNameSplited = ingredientName.Split(" :")[0];
        foreach(var recipe in shoppingList.SingleShopListRecipes)
        {
            recipe.Ingredients.RemoveAll(ingredient => ingredient.Name.Equals(ingrNameSplited));
        }

        //check if any recipes are empty on ingredients and if yes, remove whole recipe object from list
        shoppingList.SingleShopListRecipes.RemoveAll(recipe => recipe.Ingredients.Count == 0);
    }

    void ToggleAdditionalCompleted(AdditionalFoodCurrentItem item)
    {
        item.Completed = !item.Completed;
    }

    void ToggleCompletedIngredient(Ingredient ingredient)
    {
        bool allInstancesFinished = true;
        ingredient.Finished = !ingredient.Finished;

        //check if other recipes has same ingredient name, and if all checked completed
        // mark merged completed with same name

        //run through all ingredients
        foreach(var recipe in shoppingList.SingleShopListRecipes)
        {
            foreach(var ingrObj in recipe.Ingredients)
            {
                if(ingrObj.Name.Equals(ingredient.Name) && ingrObj.Finished == false)
                {
                    allInstancesFinished = false;
                    return;
                }
            }
        }

        //if all instances are finished, fint the one in merged list and check it to true it is not
        if (allInstancesFinished)
        {
            foreach(var ingr in mergedList.Ingredients)
            {
                //split to get the name without quantities
                var pureName = ingr.Name.Split(" :")[0];
                if (pureName.Equals(ingredient.Name) && ingr.Finished != true)
                {
                    ingr.Finished = true;
                }
            }
        }

    }

    void ToggleCompletedMergedIngredient(string ingredientNameConcated)
    {

        //mark it as true in the merged list object version
        var ingredientMerged = mergedList.Ingredients.Where(ingr => ingr.Name.Equals(ingredientNameConcated)).First();
        ingredientMerged.Finished = !ingredientMerged.Finished;

        // if (ingredientMerged.Finished)
        // {
        var nameSplited = ingredientNameConcated.Split(" :")[0];
        foreach (var recipes in shoppingList.SingleShopListRecipes)
        {
            foreach (var ingredient in recipes.Ingredients)
            {
                if (ingredient.Name == nameSplited)
                {
                    ingredient.Finished = ingredientMerged.Finished;
                }
            }
        }
        // }
    }

    void ToggleCompletedMergedExtraItem(string ingredientNameConcated)
    {
        var additionalItemInMerged = mergedList.ExtraItems.Where(ingr => ingr.Name.Equals(ingredientNameConcated)).First();
        additionalItemInMerged.Completed = !additionalItemInMerged.Completed;

        if (additionalItemInMerged.Completed)
        {
            foreach(var additional in shoppingList.AdditionalItems)
            {
                if (additional.Name.Equals(ingredientNameConcated))
                {
                    additional.Completed = true;
                }
            }
        }
    }

    private async void SaveShoppingListToBackend()
    {
        LoadingData = true;
        StateHasChanged();
        //make post request
        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

            ShoppingListPageDTO updatedShopList = new ShoppingListPageDTO()
                {
                    SingleShopList = shoppingList,
                    AdditionalItems = earlierAddedITems
                };

            var response = await Http.PostAsJsonAsync("shoppinglist/update-shoppinglist", updatedShopList);

            if (!response.IsSuccessStatusCode)
            {
                //show error message
                return;
            }
            else{
                getShoppingListFromBackend();
                LoadingData = false;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("im in catch!");
            Console.WriteLine(e.Message);
        }
    }

    private void AddEarlierItemToShoppingList(string item)
    {
        bool alreadyExistsInShoppinglist = shoppingList.AdditionalItems.Any(inList => inList.Name == item);
        if (!alreadyExistsInShoppinglist)
        {
            shoppingList?.AdditionalItems.Add(new AdditionalFoodCurrentItem(){Name = item});
        }
        // Add the item to the shoppingList
        bool alreadyExistsInMergedList = mergedList.ExtraItems.Any(extraItem => extraItem.Name == item);
        if (!alreadyExistsInMergedList)
        {
            mergedList.ExtraItems.Add(new AdditionalFoodCurrentItem() { Name = item });
        }
    }

    private void RemoveItemFromAdditionalList(string itemName)
    {
        earlierAddedITems?.RemoveAll(item => item == itemName);
    }

    private void RemoveWholeRecipeFromShoppingList(string recipeName)
    {
        shoppingList?.SingleShopListRecipes.RemoveAll(d => d.RecipeName == recipeName);
    }

    private void ShowMergedShoppingList()
    {

        //only do merge if it is empty
        if(mergedList.Ingredients.Count == 0)
        {
            //take all items from all shopping recipies and add to temporary list with all ingredients
            List<Ingredient> tempIngr = shoppingList.SingleShopListRecipes
                                         .SelectMany(recipe => recipe.Ingredients)
                                         .ToList();



            for (int i = tempIngr.Count - 1; i >= 0; i--)
            {
                string tempName = "";
                tempName += $"{tempIngr[i].Name} : {tempIngr[i].Quantity}{tempIngr[i].Unit}";

                // a second for loop to check ahead in list and find duplicate names
                for (int j = i - 1; j >= 0; j--)
                {
                    if (tempIngr[i].Name == tempIngr[j].Name)
                    {
                        tempName += $" {tempIngr[j].Quantity}{tempIngr[j].Unit} ";
                        tempIngr.RemoveAt(j);
                        i--; // Decrement i as the list size has changed
                    }
                }

                mergedList.Ingredients.Add(new Ingredient(){Name = tempName});
                tempName = " ";
            }

            //add the extra items aswell
            mergedList.ExtraItems.AddRange(shoppingList.AdditionalItems);
        }

        ShowMergedList = true;
        StateHasChanged();
    }

    private void ShowSeparatedList()
    {
        ShowMergedList = false;
        StateHasChanged();
    }

    private void RemoveItemFromMerged(string nameToRemove)
    {
        //separate name from quant and unit by blank space and ":"
        var nameSeparated = nameToRemove.Split(" :")[0];

        //delete from merged list
        mergedList.ExtraItems.RemoveAll(additionalItem => additionalItem.Name.Equals(nameToRemove));
        shoppingList.AdditionalItems.RemoveAll(additionalItem => additionalItem.Name.Equals(nameToRemove));
    }
}
