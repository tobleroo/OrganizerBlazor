@page "/see-recipe/{RecipeId}"
@using System.Net.Http.Headers;
@inject ILocalStorageService LocalStorageService
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container mt-4">
    @if (recipe == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h3>Loading recipe...</h3>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <input type="text" class="form-control" @bind="recipe.RecipeName" readonly="@(!isEditModeOn)">
                    <button class="btn btn-secondary ms-2" @onclick="TurnOnEditMode">
                        <i class="bi bi-pencil"></i>
                    </button>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Cooktime:</label>
                            <input type="number" class="form-control" @bind="recipe.CookTime" readonly="@(!isEditModeOn)" min="1" max="299">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Portions:</label>
                            <input type="number" class="form-control" @bind="recipe.Portions" readonly="@(!isEditModeOn)" min="1" max="99">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Type:</label>
                            <select class="form-select" @bind="recipe.RecipeType" disabled="@(!isEditModeOn)">
                                <option value="Breakfast">Breakfast</option>
                                <option value="Lunch">Lunch</option>
                                <option value="Dinner">Dinner</option>
                                <option value="Dessert">Dessert</option>
                                <option value="Snack">Snacks</option>
                            </select>
                        </div>
                        <!-- Other fields... -->
                    </div>
                    <div class="col-md-8">
                        <div class="mb-3">
                            <label class="form-label">Description:</label>
                            <textarea class="form-control" readonly="@(!isEditModeOn)" @bind="recipe.Description"></textarea>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <h2>Ingredients</h2>
                    @if (recipe.Ingredients.Count == 0)
                    {
                        <strong>No ingredients!</strong>
                    }
                    else
                    {
                        @foreach (var ingredient in recipe.Ingredients)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <p class="mb-0">@ingredient.Name @ingredient.Quantity @ingredient.Unit</p>
                                @if (isEditModeOn)
                                {
                                    <button class="btn btn-danger" @onclick="() => RemoveIngredientFromRecipe(ingredient)">
                                        <i class="bi bi-trash"></i> <!-- Bootstrap trash icon for remove/delete -->
                                    </button>
                                }
                            </div>
                        }
                    }
                    @if (isEditModeOn)
                    {
                        <div class="input-group mb-3">
                            <span class="input-group-text">Name</span>
                            <input type="text" class="form-control" placeholder="Ingredient name" @bind="ingrName" />
                        </div>

                        <!-- Amount Input -->
                        <div class="input-group mb-3">
                            <span class="input-group-text">Amount</span>
                            <input type="number" class="form-control" placeholder="Amount" @bind="ingrAmount" min="1" max="10000" />
                        </div>

                        <!-- Unit Input -->
                        <div class="input-group mb-3">
                            <span class="input-group-text">Unit</span>
                            <input type="text" class="form-control" placeholder="Unit" @bind="unitName" />
                        </div>

                        <!-- Add Button -->
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary" @onclick="AddNewIngredientToList">
                                <i class="bi bi-plus-lg"></i> <!-- Bootstrap plus icon -->
                            </button>
                        </div>
                    }
                </div>

                <div class="mb-3">
                    <h2>Steps</h2>
                    @if (recipe.Steps.Count == 0)
                    {
                        <div class="alert alert-info">No steps added!</div>
                    }
                    else
                    {
                        <ul class="list-group mb-3">
                            @foreach (var step in recipe.Steps)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @step
                                    @if (isEditModeOn)
                                    {
                                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveStepFromList(step)">
                                            <i class="bi bi-trash"></i> <!-- Bootstrap icon for trash -->
                                        </button>
                                    }
                                </li>
                            }
                        </ul>
                    }
                    @if (isEditModeOn)
                    {
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" placeholder="Add step" @bind="addStepTextInput" />
                            <button class="btn btn-primary" @onclick="AddStepToList">
                                <i class="bi bi-plus-lg"></i> <!-- Bootstrap plus icon -->
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between mt-3">
            <button class="btn btn-primary" @onclick="SaveOrUpdateRecipeToBackend">Save Recipe</button>
            @if (RecipeCanBeDeleted)
            {
                <button class="btn btn-danger" @onclick="DeleteRecipeFromBackend">Delete</button>
            }
            <button class="btn btn-secondary" @onclick="CancelRecipe">Cancel</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public string RecipeId { get; set; }

    private Recipe? recipe { get; set; }
    private string errorMessage = "";
    private bool isEditModeOn = false;
    private string addStepTextInput = "";
    private bool RecipeCanBeDeleted = false;

    //new ingredient add variables
    private string ingrName = "";
    private int ingrAmount = 1;
    private string unitName = "";

    protected override async Task OnInitializedAsync()
    {
        if (RecipeId == "new")
        {
            // Handle new recipe creation
            recipe = new Recipe
            {
                RecipeName = "New recipe"
            };
        }
        else
        {
            await GetRecipeFromBackend();
        }
    }

    private void CancelRecipe()
    {
        NavigationManager.NavigateTo("/cookbook-overview");
    }

    private void TurnOnEditMode()
    {
        isEditModeOn = !isEditModeOn;
        StateHasChanged();
    }

    private async Task DeleteRecipeFromBackend()
    {
        // Get the JWT token
        string token = await LocalStorageService.GetItemAsync<string>("JwtToken");
        // Set the Authorization header with the JWT token
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        try
        {
            var response = await Http.PostAsJsonAsync("cookbook/remove-one-recipe", recipe.Guid.ToString());

            if (response.IsSuccessStatusCode)
            {
                // Handle success - perhaps navigate back to the cookbook page
                NavigationManager.NavigateTo("/cookbook-overview");
            }
            else
            {
                // Handle errors
                errorMessage = $"Failed to save recipe: {response.ReasonPhrase}";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            errorMessage = $"Error occurred: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task GetRecipeFromBackend()
    {
        try
        {
            // Get the JWT token
            string token = await LocalStorageService.GetItemAsync<string>("JwtToken");
            // Set the Authorization header with the JWT token
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            string url = $"cookbook/get-one-recipe/{RecipeId}";

            recipe = await Http.GetFromJsonAsync<Recipe>(url);
            RecipeCanBeDeleted = true;
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = httpEx.Message;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    private async Task SaveOrUpdateRecipeToBackend()
    {
        // Get the JWT token
        string token = await LocalStorageService.GetItemAsync<string>("JwtToken");
        // Set the Authorization header with the JWT token
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        Console.WriteLine($"meal type: {recipe.RecipeType.ToString()}");
        try
        {
            var response = await Http.PostAsJsonAsync("cookbook/add-one-recipe", recipe);

            if (response.IsSuccessStatusCode)
            {
                // Handle success - perhaps navigate back to the cookbook page
                NavigationManager.NavigateTo("/cookbook-overview");
            }
            else
            {
                // Handle errors
                errorMessage = $"Failed to save recipe: {response.ReasonPhrase}";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            errorMessage = $"Error occurred: {ex.Message}";
            StateHasChanged();
        }

    }

    private void AddStepToList()
    {
        if(addStepTextInput.Length > 1)
        {
            recipe.Steps.Add(addStepTextInput);
            addStepTextInput = "";
        }
    }

    private void RemoveStepFromList(string stepName)
    {
        recipe.Steps.Remove(stepName);
    }

    private void AddNewIngredientToList()
    {
        Ingredient freshIngredient = new Ingredient()
            {
                Name = ingrName,
                Quantity = ingrAmount,
                Unit = unitName
            };

        recipe.Ingredients.Add(freshIngredient);

        ingrName = "";
        ingrAmount = 1;
        unitName = "";
    }

    private void RemoveIngredientFromRecipe(Ingredient ingredient)
    {
        recipe.Ingredients.Remove(ingredient);
    }
}
