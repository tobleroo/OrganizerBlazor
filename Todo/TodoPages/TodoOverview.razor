@page "/todo"
@using OrganizerBlazor.Diary.Models.DiaryDTOs
@using OrganizerBlazor.Todo.Models
@using System.Net.Http.Headers
@using OrganizerBlazor.Todo.Models.DTOs

@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject HttpClient Http

<div class="container">

    <!-- Error Message Box -->
    @if (!string.IsNullOrEmpty(errorMsg))
    {
        <div class="alert alert-danger" role="alert">
            @errorMsg
        </div>
    }

    <div class="row">

        @if(todoDocument is not null)
        {
            <!-- Active To-Do List Box -->
            <div class="col-md-6">
                <div class="border p-3" style="position: relative; height: 300px; overflow-y: auto; padding-bottom: 60px;">
                    <!-- Heading and Save Button on the same line -->
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5>Active To-Dos</h5>
                        <button class="btn btn-primary" @onclick="UpdateTodoList">Save</button>
                    </div>

                    <!-- Todo Items -->
                    @foreach (var todo in todoDocument.ActiveTodos)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@todo.Name" @bind="todo.Done">
                            <label class="form-check-label" for="@todo.Name">@todo.Name</label>
                        </div>
                    }

                    <!-- Fixed Input for Adding New Todo -->
                    <div style="position: absolute; bottom: 0; left: 0; width: 100%; padding: 10px; background-color: white;">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="New Todo" aria-label="New Todo" @bind="newTodoName">
                            <button class="btn btn-outline-secondary" type="button" @onclick="AddNewTodo">Add</button>
                        </div>
                    </div>
                </div>

                <!-- Redesigned 'Get Suggestions' Button -->
                <div class="text-center mt-3">
                    <button class="btn btn-info" @onclick="GetTodoSuggestion">Get Suggestions</button>
                </div>
                @if(todoSuggestions is not null)
                {
                    <div class="border p-3 m-3" style="height: 300px; overflow-y: auto;">
                        <h5>Suggested To-Dos</h5>
                        @foreach (var suggestion in todoSuggestions.SuggestedActivites)
                        {
                            <div>
                               <p> @suggestion.Key (@suggestion.Value days overdue)</p>
                            </div>
                        }

                        @if (todoSuggestions.ActivitesNeverDone.Count() != 0)
                        {
                            <h5>Activities Never Done</h5>
                            @foreach (var activity in todoSuggestions.ActivitesNeverDone)
                            {
                                <div>
                                    <p>@activity </p>
                                </div>
                            }
                        }
                    </div>
                }
            </div>

            <!-- To-Do Categories and Activities Box -->
            <div class="col-md-6">
                <div class="border p-3 m-3" style="height: 300px; overflow-y: auto;">
                    <h2>All Activities</h2>
                    @foreach (var category in todoDocument.TodoCategories)
                    {
                        <div class="mb-3">
                            <h3 class="mb-2">@category.CategoryTitle</h3>
                            @foreach (var activity in category.Activities)
                            {
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="form-check d-flex align-items-center">
                                        <label class="form-check-label me-3" for="@activity.Id">
                                            @activity.Title every @activity.FrequencyAmount @activity.FrequencyType
                                        </label>
                                    </div>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => AddToTodo(activity)">Add</button>
                                </div>
                            }
                        </div>
                    }
                </div>
                <!-- Add New Category and To-Do Item Controls -->
                <div class="mt-3">

                    <div class="category-input-box">
                        <!-- Add New Category -->
                        <div @onclick="ToggleCategoryInputVisibility" class="title-icon-container">
                            <span class="oi oi-arrow-thick-bottom me-2" aria-hidden="true"></span>
                            <span>Add a new category</span>
                        </div>

                        <!-- Input Div -->
                        @if (showCategoryInput)
                        {
                            <div class="m-3">
                                <div class="input-group">
                                    <input type="text" class="form-control" id="newCategoryTitle" required placeholder="e.g., Cleaning" @bind="newCategoryTitle">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="() => AddNewCategory(newCategoryTitle)">Add Category</button>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="new-item-input-box mb-3">

                        <div @onclick="ToggleNewItemInputVisibility" class="title-icon-container">
                            <span class="oi oi-arrow-thick-bottom me-2" aria-hidden="true"></span>
                            <span>Add a new task</span>
                        </div>

                        @if (showNewItemInput)
                        {
                            <div class="m-3">
                                <label for="newTodoTitle" class="form-label">Name of new task</label>
                                <input type="text" class="form-control" id="newTodoTitle" required placeholder="Task name" @bind="newTodoTitle">
                            </div>
                            <div class="m-3">
                                <label for="categorySelect" class="form-label">Choose Category</label>
                                <select class="form-select" id="categorySelect" @bind="selectedCategoryTitle" required>
                                    <option value="" selected>Choose category...</option>
                                    @foreach (var category in todoDocument.TodoCategories)
                                    {
                                        <option value="@category.CategoryTitle">@category.CategoryTitle</option>
                                    }
                                </select>
                            </div>
                            <div class="m-3">
                                <label for="frequencyAmount" class="form-label">Frequency</label>
                                <input type="number" class="form-control" id="frequencyAmount" placeholder="Enter frequency" @bind="frequencyAmount" min="1">
                            </div>
                            <div class="m-3">
                                <label for="frequencyTypeSelect" class="form-label">Frequency Period</label>
                                <select class="form-select" id="frequencyTypeSelect" @bind="selectedFrequencyType">
                                    <option value="" selected>Period...</option>
                                    @foreach (var frequencyType in Enum.GetValues<FrequencyTypes>())
                                    {
                                        <option value="@frequencyType">@frequencyType</option>
                                    }
                                </select>
                            </div>
                            <div class="m-3">
                                <label for="timeToPerform" class="form-label">Time to Perform (Minutes)</label>
                                <input type="number" class="form-control" id="timeToPerform" placeholder="Enter time in minutes" @bind="timeToPerformMinutes" min="1">
                            </div>
                            <div class="text-center">
                                <button class="btn btn-outline-secondary" type="button" @onclick="AddTodoItem">Add Item</button>
                            </div>
                        }
                    </div>

                    <!-- Add New To-Do Item under a Category -->
                </div>
            </div>

        }else
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                @* <h3>Fetching</h3> *@
            </div>
        }
    </div>
</div>

@code {
    private TodoDocument? todoDocument;
    private string newCategoryTitle;
    private string newTodoTitle;
    private string selectedCategoryTitle;
    private int frequencyAmount = 1;
    private int timeToPerformMinutes;
    private FrequencyTypes selectedFrequencyType;

    private string? errorMsg = string.Empty;

    private TodoSuggestionsDTO? todoSuggestions = null;

    private string newTodoName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        string token = await LocalStorageService.GetItemAsync<string>("JwtToken");
        // Set the Authorization header with the JWT token
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.GetAsync("/todo/get-todo");
        if (response.IsSuccessStatusCode)
        {
            todoDocument = await response.Content.ReadFromJsonAsync<TodoDocument>();

            StateHasChanged();
        }
        else
        {
            errorMsg = "Something went wrong!, check internet connection!";
            StateHasChanged();
        }

    }

    private async Task GetTodoSuggestion()
    {
        var response = await Http.GetAsync("/todo/get-suggestions");
        if (response.IsSuccessStatusCode)
        {
            var suggestionsData = await response.Content.ReadFromJsonAsync<ProcessDataGeneric<TodoSuggestionsDTO>>();
            todoSuggestions = suggestionsData.Data;
            StateHasChanged();
        }
        else
        {
            errorMsg = "Something went wrong!, check internet connection!";
            StateHasChanged();
        }
    }

    private async Task AddNewCategory(string categoryName)
    {

        //make post http to save to backend
        var response = await Http.PostAsJsonAsync("/todo/add-category", categoryName);
        if (response.IsSuccessStatusCode)
        {
            todoDocument.TodoCategories.Add(
                new TodoCategory() { CategoryTitle = categoryName }
            );
            newCategoryTitle = "";
            errorMsg = string.Empty;
        }
        else
        {
            errorMsg = "Could not save new Category! try again!";
            StateHasChanged();
        }

    }

    private async Task AddTodoItem()
    {
        //the new todocategory works as DTO so it knows what category to add the task to
        var categoryDTO = new TodoCategory()
        {
            CategoryTitle = selectedCategoryTitle
        };

        var newActivity = new TodoActivity()
        {
            Title = newTodoTitle,
            FrequencyAmount = frequencyAmount,
            FrequencyType = selectedFrequencyType,
            TimeToPerformMinutes = timeToPerformMinutes
        };

        categoryDTO.Activities.Add(newActivity);



        var response = await Http.PostAsJsonAsync("/todo/add-task-to-category", categoryDTO);
        if (response.IsSuccessStatusCode)
        {
            AddNewTodoActivity(selectedCategoryTitle, newActivity);
            errorMsg = string.Empty;
        }
        else errorMsg = "could not save activity, try again!";

    }

    private void AddNewTodoActivity(string categoryTitle, TodoActivity newActivity)
    {
        var categoryList = todoDocument.TodoCategories
            .FirstOrDefault(cat => cat.CategoryTitle == categoryTitle);

        //make http post to add activity to category in backend aswell


        categoryList?.Activities.Add(newActivity);
        newTodoTitle = "";
        frequencyAmount = 1;

    }

    private async Task AddToTodo(TodoActivity activity)
    {
        ActiveTodoTask newTask = new ActiveTodoTask() { Name = activity.Title };

        var response = await Http.PostAsJsonAsync("/todo/add-todo-list", newTask);
        if (response.IsSuccessStatusCode)
        {
            todoDocument.ActiveTodos.Add(newTask);
            errorMsg = string.Empty;
        }
        else errorMsg = "could not save task to list, try again!";

    }

    private async Task RemoveCategory(TodoCategory todoCat)
    {
        var response = await Http.PostAsJsonAsync("/todo/remove-category", todoCat.CategoryTitle);
        if (response.IsSuccessStatusCode)
        {
            todoDocument.TodoCategories.Remove(todoCat);
            errorMsg = string.Empty;
        }
        else errorMsg = "could not remove category, try again!";
    }

    private async Task RemoveTaskFromCategory(string category, TodoActivity todoActivity)
    {
        var categoryDTO = new TodoCategory() { CategoryTitle = category };
        categoryDTO.Activities.Add(todoActivity);
        var response = await Http.PostAsJsonAsync("/todo/remove-task", categoryDTO);
        if (response.IsSuccessStatusCode)
        {
            var categoryToRemoveFrom = todoDocument.TodoCategories.Where(cat => cat.CategoryTitle == category).First();
            categoryToRemoveFrom.Activities.Remove(todoActivity);
            errorMsg = string.Empty;
        }
        else errorMsg = "Could not remove Task, try again!";
    }

    private async Task UpdateTodoList()
    {
        var response = await Http.PostAsJsonAsync("/todo/update-todo-list", todoDocument.ActiveTodos);
        if (response.IsSuccessStatusCode)
        {
            var processData = await response.Content.ReadFromJsonAsync<ProcessDataGeneric<List<ActiveTodoTask>>>();
            todoDocument.ActiveTodos = processData.Data;
            StateHasChanged();
            errorMsg = string.Empty;
        }
        else errorMsg = "Could not update todo list, try again!";
    }

    // --- toggle inputs code ---

    private bool showCategoryInput = false;

    private void ToggleCategoryInputVisibility()
    {
        showCategoryInput = !showCategoryInput;
    }

    private bool showNewItemInput = false;

    private void ToggleNewItemInputVisibility()
    {
        showNewItemInput = !showNewItemInput;
    }

    private void AddNewTodo()
    {
        ActiveTodoTask OneTimeTask = new ActiveTodoTask() { Name = newTodoName };

        todoDocument.ActiveTodos.Add(OneTimeTask);
        newTodoName = string.Empty;
    }
}