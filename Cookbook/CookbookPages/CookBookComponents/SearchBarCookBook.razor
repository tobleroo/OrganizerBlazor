@using OrganizerBlazor.Cookbook.Models.CookBookDTO;

<div class="container mt-3">
    <div class="row">
        <!-- Recipe Name Field -->
        <div class="col-12 col-md-5">
            <div class="input-group mb-3">
                <span class="input-group-text" id="inputGroup-sizing-default">Recipe Name</span>
                <input type="text" class="form-control" aria-label="Recipe name" aria-describedby="inputGroup-sizing-default" @bind="SearchTerm">
            </div>
        </div>

        <!-- Type of Meal Dropdown -->
        <div class="col-12 col-md-5">
            <div class="input-group mb-3">
                <label class="input-group-text" for="type">Meal Type</label>
                <select class="form-select" id="type" @bind="TypeTerm">
                    <option value="all" selected="selected">All</option>
                    <option value="breakfast">Breakfast</option>
                    <option value="lunch">Lunch</option>
                    <option value="dinner">Dinner</option>
                    <option value="dessert">Dessert</option>
                    <option value="snack">Snack</option>
                </select>
            </div>
        </div>

        <!-- Cook Time Input -->
        <div class="col-12 col-md-4">
            <div class="input-group mb-3">
                <span class="input-group-text" id="cookTimeLabel">Cook Time</span>
                <input type="number" class="form-control" aria-label="Cook time" aria-describedby="cookTimeLabel" @bind="MaxTimeCook">
            </div>
        </div>

        <!-- Search Button -->
        <div class="col-12 col-md-3 d-flex align-items-end">
            <button type="button" class="btn btn-primary w-100" @onclick="Search">Search</button>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public List<RecipeOverviewData> RecipeData { get; set; }

    [Parameter]
    public EventCallback<List<RecipeOverviewData>> OnRecipesFiltered { get; set; }

    private string SearchTerm { get; set; }
    private string TypeTerm { get; set; } = "all";
    private int MaxTimeCook { get; set; } = 120;

    private async Task Search()
    {
        var filteredRecipes = RecipeData;

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            filteredRecipes = filteredRecipes.Where(recipe =>
                recipe.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }

        if (MaxTimeCook > 0)
        {
            filteredRecipes = filteredRecipes.Where(recipe =>
                recipe.TimeToCook <= MaxTimeCook).ToList();
        }

        if (TypeTerm != "all")
        {
            filteredRecipes = filteredRecipes.Where(recipe =>
                recipe.RecipeType.Equals(TypeTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        await OnRecipesFiltered.InvokeAsync(filteredRecipes);
    }
}
