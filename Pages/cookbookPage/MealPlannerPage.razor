@page "/mealGen"
@using System.Net.Http.Headers;
@using OrganizerBlazor.Models.CookBookDTO;

@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@attribute [Authorize]


<link rel="stylesheet" href="../css/mealGen.css">

<div class="mealplanner-box">

    <h2>@errorMessage</h2>

    <div class="selectRanOrSpecBox">
        <button class="selectionButton @(RandomOrSpecificBox ? "active" : "")" @onclick="() => RandomOrSpecificBox = true">Random</button>
        <button class="selectionButton @(RandomOrSpecificBox ? "" : "active")" @onclick="() => RandomOrSpecificBox = false">Specific</button>
    </div>

    @if (RandomOrSpecificBox)
    {
        <div class="randomMealInputBox">
            <div class="howManyRecipesBox">
                <div class="mealplanner-info-box">
                    <h2>Meal plan generator</h2>
                    <i> Select how many Recipies you want to generate from your own cookbook:</i>
                </div>
                <div class="mealplan-add-remove-box">
                    <button @onclick="addRecipeToList">Add</button>
                    <button @onclick="removeRecipeFromList">Remove</button>
                </div>
            </div>

            <form @onsubmit="SubmitMealPlanner">
                <div class="AllRecipeInBox">
                    @for (int i = 0; i < recipeRequests.Count; i++)
                    {
                        <RecipeRequestBoxComp RecipeRequest="recipeRequests[i]" />
                    }
                </div>
                <button type="submit">Generate</button>
            </form>
        </div>
    }
    else
    {
        <div class="specificMealInputBox">
            <form @onsubmit="SubmitSpecificPlan">

            </form>
        </div>
    }


    
    

    


    <div class="mealplan-box">
        <div class="all-gen-recipies">

            @if (MealPlannedRecipes != null)
            {
                foreach (var recipe in MealPlannedRecipes)
                {
                    <div class="recipe-card">
                        <h1>@recipe.RecipeName</h1>

                        <div class="desc-box">
                            <i>Description</i>
                            <p>@recipe.Description</p>
                        </div>


                        <div class="ingredients">
                            <h2>Ingredients:</h2>
                            <ul>
                                @foreach (var ingredient in recipe.Ingredients)
                                {
                                    <li>@ingredient.Name - @ingredient.Quantity @ingredient.Unit</li>
                                }
                            </ul>
                        </div>

                        <div class="instructions">
                            <h2>Cooking Instructions:</h2>
                            @if (recipe.Steps.Count == 0)
                            {
                                <i>No steps added!</i>
                            }
                            else
                            {
                                <ol>
                                    @foreach (var step in recipe.Steps)
                                    {
                                        <li>@step</li>
                                    }
                                </ol>
                            }
                        </div>

                        <i>Details:</i>
                        <div class="recipe-details">
                            <p>Cook Time: @recipe.CookTime minutes</p>
                            <p>Difficulty: @(recipe.Difficulty)</p>
                            <p>Vegan: @recipe.IsVegan</p>
                            <p>Portions: @recipe.Portions</p>
                            <p>Recipe Type: @(recipe.RecipeType)</p>
                            <p>Spiciness: @(recipe.Spicyness)</p>
                        </div>
                    </div>
                }
            }
            @if (MealGeneratorLoading)
            {
                <div class="loading-box">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h3>Generating...</h3>
                </div>
            }
        </div>

         @if (MealPlannedRecipes != null)
        {
            <div class="shopping-List-info">
                <i>If you are satisfied with the generated meals, you can create shoppinglist based on selected recipies</i>
                <button @onclick=SubmitToShoppingList>Generate shopping list</button>
            </div>
        }

    </div>

    <div class="shoppinglist-box">
        @if(SavedShoppingList != null)
        {
            <h3>Shopping list</h3>
            @foreach (var recipe in SavedShoppingList)
            {
                <div class="recipe">
                    <h4>@recipe.RecipeName</h4>
                    <ul class="ingredient-list">
                        @foreach (var ingredient in recipe.Ingredients)
                        {
                            <li>@ingredient.Name - @ingredient.Quantity @ingredient.Unit</li>
                        }
                    </ul>
                </div>
            }
        }

        @if (ShoppingListLoading)
        {
            <div class="loading-box">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h3>Generating...</h3>
            </div>
        }

    </div>


</div>

@code {

    private string errorMessage = "";
    private List<Recipe>? MealPlannedRecipes;
    private List<ShoppingListRecipeDetails>? SavedShoppingList;
    Dictionary<string, SpecificRecipeGen>? cookbookRecipeNames;

    private bool MealGeneratorLoading = false;
    private bool ShoppingListLoading = false;
    private bool RandomOrSpecificBox = true;


    private List<RecipeRequestEasyDTO> recipeRequests = new List<RecipeRequestEasyDTO>()
    {
        new RecipeRequestEasyDTO()
    };

    private async void SubmitMealPlanner()
    {
        if (SavedShoppingList != null) SavedShoppingList = null;
        if (MealPlannedRecipes != null) MealPlannedRecipes = null;
        MealGeneratorLoading = true;

        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);
            var response = await Http.PostAsJsonAsync("meal/easy", recipeRequests);

            if (!response.IsSuccessStatusCode)
            {
                MealGeneratorLoading = false;
                //show error message
                errorMessage = "check console log for error message!";
                Console.WriteLine(response);
                return;
            }

            var recipes = await response.Content.ReadFromJsonAsync<List<Recipe>>();

            if(recipes.Count == 0)
            {
                errorMessage = "no recipies fit requirements!";
                return;
            }

            MealPlannedRecipes = recipes;
            errorMessage = "";
            MealGeneratorLoading = false;
            StateHasChanged();


        }catch(Exception e)
        {
            Console.WriteLine("im in catch!");
            Console.WriteLine(e.Message);
        }


    }

    private void addRecipeToList()
    {
        if(recipeRequests.Count >= 10) errorMessage = "Max amount of requests added!";
        else recipeRequests.Add(new RecipeRequestEasyDTO());
    }

    private void removeRecipeFromList()
    {
        recipeRequests.RemoveAt(recipeRequests.Count - 1);
        if (errorMessage == "Max amount of requests added!") errorMessage = "";
    }

    private List<ShoppingListDetailsDTO> CreateShoppingList()
    {
        List<ShoppingListDetailsDTO> shoppingListRecipesWanted = new List<ShoppingListDetailsDTO>();
        if (MealPlannedRecipes != null || MealPlannedRecipes.Count != 0)
        {

            int portionsAmounts = 0;
            foreach(var recipe in MealPlannedRecipes)
            {
                shoppingListRecipesWanted.Add(new ShoppingListDetailsDTO()
                {
                        RecipeName = recipe.RecipeName,
                        PortionsAmount = recipeRequests[portionsAmounts].portions
                });

                portionsAmounts++;
            }
        }

        return shoppingListRecipesWanted;
    }

    private async void SubmitToShoppingList()
    {
        if (SavedShoppingList != null) SavedShoppingList = null;
        ShoppingListLoading = true;
        var shoppingListInfo = CreateShoppingList();
        //Console.WriteLine(shoppingListInfo.Count);

        //do the api call
        try
        {
            var response = await Http.PostAsJsonAsync("meal/shoppinglist", shoppingListInfo);
            if (!response.IsSuccessStatusCode)
            {
                //show error message
                errorMessage = "check console log for error message!";
                Console.WriteLine(response);
                return;
            }

            var shoppingList = await response.Content.ReadFromJsonAsync<List<ShoppingListRecipeDetails>>();

            SavedShoppingList = shoppingList;
            ShoppingListLoading = false;
            StateHasChanged();

        }catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async void SubmitSpecificPlan()
    {

    }

    private async void getCookbookRecipeNamesFromBackend()
    {
        try
        {

            cookbookRecipeNames = await Http.GetFromJsonAsync<Dictionary<string, SpecificRecipeGen>>("specific-Meal-Gen-Recipe-Details");

            // Now, you can use the 'result' dictionary as needed
            Console.WriteLine($" amount of types (should be 5?) -> {cookbookRecipeNames?.Count}");
        }
        catch (HttpRequestException ex)
        {
            // Handle the exception (e.g., show an error message to the user or log it)
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void ToggleSelection()
    {
        RandomOrSpecificBox = !RandomOrSpecificBox;
    }

}
