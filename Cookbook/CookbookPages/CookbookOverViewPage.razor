@page "/cookbook-overview"
@using OrganizerBlazor.Cookbook.Models.CookBookDTO;
@using System.Net.Http.Headers;
@using System.Net;
@using OrganizerBlazor.Auth.Service;
@using OrganizerBlazor.Cookbook.CookbookPages.CookBookComponents

@attribute [Authorize]

@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject HttpClient Http



<div class="container mt-4">

    @if (loadingData)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h3>Loading shopping list...</h3>
        </div>
    }
    else
    {
        
        <SearchBarCookBook RecipeData="@OriginalList" OnRecipesFiltered="HandleRecipesFiltered" />

        <ul class="list-group">
            @foreach (var recipe in recipeData)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => goToRecipePage(recipe.Id)">
                    <div>
                        <h5 class="mb-1">@recipe.Name</h5>
                        <small class="text-muted">
                            <span class="oi oi-clock me-2" aria-hidden="true"></span>
                            @recipe.TimeToCook minutes
                        </small>
                        <small class="ms-2">
                            <span style="font-size: 20px;">&#x1F374;</span>
                            @recipe.RecipeType
                        </small>
                    </div>
                </li>
            }
        </ul>

        <div class="mt-4">
            <button class="btn btn-primary" @onclick="() => goToRecipePage()">
                <i class="bi bi-plus"></i> Add New Item
            </button>
        </div>
    }
</div>

@code {
    private List<RecipeOverviewData> OriginalList = new();
    private List<RecipeOverviewData> recipeData = new List<RecipeOverviewData>();
    private string errorMessage = "";
    private bool loadingData = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the JWT token
            string token = await LocalStorageService.GetItemAsync<string>("JwtToken");
            // Set the Authorization header with the JWT token
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            recipeData = await Http.GetFromJsonAsync<List<RecipeOverviewData>>("cookbook/recipe-overview-data");
            //make a copy
            OriginalList = recipeData;
            loadingData = false;
            StateHasChanged();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = httpEx.Message;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            StateHasChanged();
            // Handle other types of exceptions here if necessary
        }
    }

    private void goToRecipePage(string recipeId = "new")
    {
        NavigationManager.NavigateTo($"see-recipe/{recipeId}");
    }

    private void HandleRecipesFiltered(List<RecipeOverviewData> filteredRecipes)
    {
        recipeData = filteredRecipes;
        StateHasChanged();
    }
}
