@page "/bucketlist"
@using System.Net.Http.Headers
@using OrganizerBlazor.BucketList.Models


@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject HttpClient Http

<div class="bucketlist-page">

    @if (loadingInitData)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        
        @if (!addNewAchievementDisplayed)
        {

            @foreach (var achievement in bucketlist.Achievements)
            {
                <div @onclick="() => ToggleDetails(achievement)"
                     style="cursor: pointer; background-color: @(achievement.IsCompleted ? "#28a745" : "#6c757d"); padding: 10px; margin-bottom: 5px; border-radius: 5px; display: flex; justify-content: space-between; align-items: center;">
                    <span style="color: white;">
                        @achievement.Name
                        <!-- Display completion percentage next to the name -->
                        <span style="margin-left: 10px;">(@achievement.GetProgressInPercentage()%)</span>
                    </span>
                    <div>
                        <!-- Icon to click and expand details -->
                        <i class="bi bi-chevron-down" style="color: white;"></i>
                    </div>
                </div>

                @if (achievement.ShowDetails)
                {
                    <div class="details-box" style="padding: 10px; border: 1px solid #ddd; margin-bottom: 10px; background-color: white;">
                        <p>Requirements:</p>
                        @foreach (var requirement in achievement.Requirements)
                        {
                            <div>
                                <!-- Use a checkbox for each requirement with bind directive -->
                                <input type="checkbox" @bind="requirement.IsCompleted" disabled /> @requirement.Name
                            </div>
                        }
                        <!-- Move completed-date-box here -->
                        <div class="completed-date-box">
                            @if (achievement.IsCompleted && achievement.CompletedOn.HasValue)
                            {
                                <span style="color: black; margin-right: 10px;">Achieved on: @achievement.CompletedOn.Value.ToString("yyyy-MM-dd")</span>
                            }
                        </div>

                        <!-- Edit button with Bootstrap icon -->
                        <div class="edit-achievement-box">
                            <button type="button" class="btn btn-primary" @onclick="() => EditAchievement(achievement)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                        </div>
                    </div>
                }
            }

            <button class="btn btn-primary rounded-circle position-fixed bottom-0 end-0 m-3 p-2" style="width: 50px; height: 50px;" @onclick="ToggleNewAchievement">
                <div class="d-flex align-items-center">
                    <span class="oi oi-plus me-2" aria-hidden="true"></span>
                </div>
            </button>
        }
        else
        {
            <div class="input-form">
                <h3>Add a new achievement!</h3>
                <hr class="my-4">
                <label for="achievementName" class="form-label">Achievement Name:</label>
                <input type="text" class="form-control mb-3" id="achievementName" @bind="newAchievement.Name">

                <label for="isCompleted" class="form-check-label">Is Completed:</label>
                <input type="checkbox" class="form-check-input mb-3" id="isCompleted" @bind="newAchievement.IsCompleted">

                @if (newAchievement.IsCompleted == true)
                {
                    <label for="completedDate" class="form-label">Completed on:</label>
                    <input type="date" class="form-control mb-3" id="completedDate" @bind="newAchievement.CompletedOn">
                }

                <div class="added-req-box">
                    <h4>Added requirements</h4>
                    @foreach (var req in newAchievement.Requirements)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="req.IsCompleted" />
                                <label class="form-check-label">@req.Name</label>
                            </div>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveRequirement(req)">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    }
                </div>

                <div class="mb-3">
                    <input type="text" @bind="newRequirementName" />
                    <button class="btn btn-success" @onclick="AddRequirement">Add Requirement</button>
                </div>

                @* @if(newAchievement.Pictures.Count != 2)
                {
                    <!-- New section for adding pictures -->
                    <div class="mb-3">
                        <label for="pictureTitle" class="form-label">Picture Title:</label>
                        <input type="text" class="form-control mb-3" id="pictureTitle" @bind="newPicture.Title">

                        <label for="pictureFile" class="form-label">Upload Picture:</label>
                        <InputFile class="form-control mb-3" id="pictureFile" OnChange="HandleFileUpload" accept="image/*" />

                        <button class="btn btn-primary" @onclick="AddPicture">Add Picture</button>
                    </div>
                }

                <!-- Display added pictures -->
                <div class="added-pictures-box">
                    <h4>Added Pictures</h4>
                    @foreach (var picture in newAchievement.Pictures)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div>
                                <p class="mb-0">@picture.Title</p>
                                <!-- Add the img component here -->
                                @if (picture.ImageData != null && picture.ImageData.Length > 0)
                                {
                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(picture.ImageData)}")" alt="Achievement Image" style="max-width: 100px; max-height: 100px;" />
                                }
                                else
                                {
                                    <p>No image available</p>
                                }
                            </div>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemovePicture(picture)">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    }
                </div> *@

                <button class="btn btn-primary" @onclick="() => SaveNewAchievement(newAchievement)">
                    @((addingNewAchievement ? "Add" : "Update") + " Achievement")
                </button>
                <button type="button" class="btn btn-secondary" @onclick="CancelNewAchievement">Cancel</button>
            </div>
        }
    }


</div>

@code {
    private bool loadingInitData = true;
    BucketlistDocument bucketlist = new();
    Achievement newAchievement = new Achievement();
    private string newRequirementName = "";
    private bool addNewAchievementDisplayed = false;
    private bool addingNewAchievement = true;

    private AchievementPicture newPicture = new AchievementPicture();

    protected override async Task OnInitializedAsync()
    {
        string token = await LocalStorageService.GetItemAsync<string>("JwtToken");
        // Set the Authorization header with the JWT token
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.GetAsync("/bucketlist/get");
        if (response.IsSuccessStatusCode)
        {
            bucketlist = await response.Content.ReadFromJsonAsync<BucketlistDocument>();
            loadingInitData = false;
            StateHasChanged();
        }
        else
        {
            // errorMsg = "Something went wrong!, check internet connection!";
            StateHasChanged();
        }

    }

    private void AddRequirement()
    {
        newAchievement.Requirements.Add(new Requirement(){Name = newRequirementName});
        newRequirementName = "";
    }

    private async Task SaveNewAchievement(Achievement ach)
    {
        //check if its new or updated achievement
        // Check if it's a new or updated achievement
        int existingIndex = bucketlist.Achievements.FindIndex(achievement => achievement.id == ach.id);
        if (existingIndex != -1)
        {
            // Replace if ID already exists
            bucketlist.Achievements[existingIndex] = ach;
        }
        else bucketlist.Achievements.Add(newAchievement);

        string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

        //make http post to save the achievement to the db
        var response = await Http.PostAsJsonAsync("/bucketlist/save-achievement", ach);

        // Check if the request was successful (you may need to adjust this based on your backend response)
        if (response.IsSuccessStatusCode)
        {
            // Reset the form and UI state
            newAchievement = new Achievement();
            addingNewAchievement = true;
            addNewAchievementDisplayed = false;
        }
    }

    private void CancelNewAchievement()
    {
        newAchievement = new();
        addNewAchievementDisplayed = false;
    }

    private void EditAchievement(Achievement ach)
    {
        newAchievement = ach;
        addingNewAchievement = false;
        addNewAchievementDisplayed = true;
    }

    private void RemoveRequirement(Requirement req)
    {
        newAchievement.Requirements.Remove(req);
    }

    private void ToggleDetails(Achievement achievement)
    {
        achievement.ShowDetails = !achievement.ShowDetails;
    }

    private void ToggleNewAchievement()
    {
        addNewAchievementDisplayed = !addNewAchievementDisplayed;
    }
}
