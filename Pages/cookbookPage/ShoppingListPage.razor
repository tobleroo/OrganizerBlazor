@page "/shoppinglistpage";
@using OrganizerBlazor.Auth.Service;
@using OrganizerBlazor.Models.CookBookDTO;
@using System.Net.Http.Headers;

@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IAuthUtils authUtils
@attribute [Authorize]

<link rel="stylesheet" href="../css/shoppingListPage.css">

<div class="shoppinglist-page-box">
    @* <button @onclick="getShoppingListFromBackend" class="btn btn-primary mb-3">Load Shopping List</button> *@

    @if(LoadingData)
    {
        <div class="loading-box">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h3>Loading shoppinglist...</h3>
        </div>
    }
    else
    {
        <div class="list-group">
            <h3>Shopping list</h3>
            <div class="ingredient-box">
                @foreach (var recipeShoppingData in shoppingList.SingleShopListRecipes)
                {
                    <div class="recipe-name-box">
                        <h4>@recipeShoppingData.RecipeName</h4>
                        <span @onclick="() => {RemoveWholeRecipeFromShoppingList(recipeShoppingData.RecipeName);}" class="remove-icon">🗑️</span>
                    </div>
                    @foreach (var ingredient in recipeShoppingData.Ingredients)
                    {
                        var isStriked = strikedIngredients.ContainsKey(ingredient.Guid.ToString()) && strikedIngredients[ingredient.Guid.ToString()];
                        <div @onclick="() => ToggleStriked(ingredient.Guid.ToString())" class="ingr-item list-group-item @((isStriked) ? "striked" : "")">
                            <div>
                                @ingredient.Name - @ingredient.Quantity @ingredient.Unit
                                <span @onclick:stopPropagation="true" @onclick="() => RemoveIngredient(ingredient.Guid.ToString())" class="remove-icon">🗑️</span>
                            </div>
                        </div>
                    }
                }

                @if (shoppingList.AdditionalItems != null && shoppingList.AdditionalItems.Count > 0)
                {
                    <div class="additional-list-group">
                        <h5>Additional items</h5>
                        @foreach (var item in shoppingList.AdditionalItems)
                        {
                            var isStriked = strikedAdditionalItems.ContainsKey(item) && strikedAdditionalItems[item];
                            <div @onclick="() => ToggleStrikedAdditionalItem(item)" class="list-group-item @((isStriked) ? "striked" : "")">
                                <div>
                                    @item
                                    <span @onclick="() => RemoveAdditionalItem(item)" class="remove-icon">🗑️</span>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="additional-stuff-box">
            <div class="currently-added-additional-box">
                <div class="add-additional-items-box">
                    <label>Add additional item:</label>
                    <input type="text" @bind="currentItemName" placeholder="item name"/>
                    <button @onclick="AddItemToList">add</button>
                </div>
            </div>

            <div class="additional-history-box">
                @if (earlierAddedITems != null && earlierAddedITems.Count > 0)
                {
                    <h4>Earlier Added Items</h4>
                    <div class="list-group addittional-items-box">
                        @foreach (var item in earlierAddedITems)
                        {
                            <div @onclick="() => AddEarlierItemToShoppingList(item)" class="list-group-item">
                                <div>
                                    @item
                                    <span @onclick:stopPropagation="true" @onclick="() => RemoveItemFromAdditionalList(item)" class="remove-icon">🗑️</span>
                                </div>
                            </div>
                        }
                    </div>
                }
             </div>

        </div>

        <button @onclick="SaveShoppingListToBackend">save shopping list</button>
    }

</div>

@code {
    private bool LoadingData = true;
    private Dictionary<string, bool> strikedIngredients = new Dictionary<string, bool>();
    private Dictionary<string, bool> strikedAdditionalItems = new Dictionary<string, bool>();
    private List<string>? earlierAddedITems = new();
    private string currentItemName;
    private SingleShopList? shoppingList;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        getShoppingListFromBackend();

    }

    private async void getShoppingListFromBackend()
    {
        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

            var response = await Http.GetAsync("cookbook/get-shoppinglist");

            if (!response.IsSuccessStatusCode)
            {
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    // If the status code is 401, clear the credentials and redirect.
                    await authUtils.RemoveCredentialsAsync();
                    return;
                }
                // Handle other non-success status codes appropriately
                Console.WriteLine($"Error fetching shopping list: {response.ReasonPhrase}");
                return;
            }

            var shoppingListData = await response.Content.ReadFromJsonAsync<ShoppingListPageDTO>();
            if (shoppingListData != null)
            {
                shoppingList = shoppingListData.SingleShopList;
                earlierAddedITems = shoppingListData.AdditionalItems;
            }
        }
        catch (Exception e)
        {
            // Handle any exceptions here
            Console.WriteLine($"Exception in getShoppingListFromBackend: {e.Message}");
        }
        finally
        {
            LoadingData = false;
            StateHasChanged();
        }
    }

    private void ToggleStriked(string ingredientGuid)
    {
        if (strikedIngredients.ContainsKey(ingredientGuid))
        {
            strikedIngredients[ingredientGuid] = !strikedIngredients[ingredientGuid];
        }
        else
        {
            strikedIngredients[ingredientGuid] = true;
        }
    }

    private void AddItemToList()
    {
        shoppingList.AdditionalItems.Add(currentItemName);
        earlierAddedITems.Add(currentItemName);
        currentItemName = "";
    }

    private void ToggleStrikedAdditionalItem(string item)
    {
        if (strikedAdditionalItems.ContainsKey(item))
        {
            strikedAdditionalItems[item] = !strikedAdditionalItems[item];
        }
        else
        {
            strikedAdditionalItems[item] = true;
        }
    }

    private void RemoveIngredient(string ingredientGuid)
    {

        SingleShopListRecipe recipeToRemove = null;
        // i can search directly on ingredient id since theres slim to no chance of duplicates
        foreach (var recipe in shoppingList.SingleShopListRecipes)
        {
            var ingredientToRemove = recipe.Ingredients.FirstOrDefault(ingr => ingr.Guid.ToString() == ingredientGuid);
            if (ingredientToRemove != null)
            {
                recipe.Ingredients.Remove(ingredientToRemove);
                if (recipe.Ingredients.Count == 0)
                {
                    recipeToRemove = recipe;
                }
                break; // If you only expect one ingredient with this Guid, you can break the loop once found.
            }
        }

        if (recipeToRemove != null)
        {
            shoppingList.SingleShopListRecipes.Remove(recipeToRemove);
        }

        // Optionally remove the ingredient from the strikedIngredients as well
        strikedIngredients.Remove(ingredientGuid);
    }

    private void RemoveAdditionalItem(string item)
    {
        shoppingList.AdditionalItems.Remove(item);

        // Optional: Remove from striked list
        if (strikedAdditionalItems.ContainsKey(item))
        {
            strikedAdditionalItems.Remove(item);
        }
    }

    private async void SaveShoppingListToBackend()
    {
        LoadingData = true;
        StateHasChanged();
        //make post request
        try
        {
            string tokenToSet = await LocalStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenToSet);

            ShoppingListPageDTO updatedShopList = new ShoppingListPageDTO()
                {
                    SingleShopList = shoppingList,
                    AdditionalItems = earlierAddedITems
                };

            var response = await Http.PostAsJsonAsync("cookbook/update-shoppinglist", updatedShopList);

            if (!response.IsSuccessStatusCode)
            {
                //show error message
                return;
            }
            else{
                getShoppingListFromBackend();
                LoadingData = false;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("im in catch!");
            Console.WriteLine(e.Message);
        }
    }

    private void AddEarlierItemToShoppingList(string item)
    {
        // Add the item to the shoppingList
        shoppingList?.AdditionalItems.Add(item);
    }

    private void RemoveItemFromAdditionalList(string itemName)
    {
        earlierAddedITems?.RemoveAll(item => item == itemName);
    }

    private void RemoveWholeRecipeFromShoppingList(string recipeName)
    {
        shoppingList?.SingleShopListRecipes.RemoveAll(d => d.RecipeName == recipeName);
    }
}
