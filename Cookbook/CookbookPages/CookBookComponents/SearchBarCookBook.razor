@using System.Linq;
@using OrganizerBlazor.Cookbook.Models;

<div class="search-bar">

    <input type="text" placeholder="Search name..." @bind="SearchTerm" />
    <div class="search-details-box">
        <div class="mealtype-box">
            <label for="type">Type of meal:</label>
            <select @bind="TypeTerm">
                   <option value="all" selected="selected">All</option>
                   <option value="breakfast">Breakfast</option>
                   <option value="lunch">Lunch</option>
                   <option value="dinner">Dinner</option>
                   <option value="dessert">Dessert</option>
                   <option value="snack">Snack</option>
            </select>
        </div>
        <div class="cooktime-box">
            <label for="cookTime">Cook time (minutes):</label>
            <input type="number" @bind="MaxTimeCook"/>
        </div>
        <button type="button" @onclick="Search">Search</button>
    </div>
</div>

@code {

    [Parameter]
    public List<Recipe>? OriginalList { get; set; }

    [Parameter]
    public Action<List<Recipe>>? onChangeRecipeListOnSearch { get; set; }

    private string? SearchTerm { get; set; }
    private string? TypeTerm { get; set; }
    private int MaxTimeCook { get; set; } = 120;

    private void Search()
    {
        List<Recipe>? FilteredRecipes;

        //use linq to filter list of recipes
        if (SearchTerm == "" || SearchTerm == null) FilteredRecipes = OriginalList;
        else FilteredRecipes = OriginalList?.Where(recipe => recipe.RecipeName.ToLower().Contains(SearchTerm.ToLower())).ToList();

        if (MaxTimeCook != 0)
        {
            FilteredRecipes = FilteredRecipes?.Where(recipe => recipe.CookTime < MaxTimeCook).ToList();
        }

        switch (TypeTerm)
        {
            case "breakfast":
                FilteredRecipes = FilteredRecipes?.Where(recipe => recipe.RecipeType == RecipeTypes.Breakfast).ToList();
                break;
            case "lunch":
                FilteredRecipes = FilteredRecipes?.Where(recipe => recipe.RecipeType == RecipeTypes.Lunch).ToList();
                break;
            case "dinner":
                FilteredRecipes = FilteredRecipes?.Where(recipe => recipe.RecipeType == RecipeTypes.Dinner).ToList();
                break;
            case "dessert":
                FilteredRecipes = FilteredRecipes?.Where(recipe => recipe.RecipeType == RecipeTypes.Dessert).ToList();
                break;
            case "all":
                break;
        }

        onChangeRecipeListOnSearch?.Invoke(FilteredRecipes);
    }
}
