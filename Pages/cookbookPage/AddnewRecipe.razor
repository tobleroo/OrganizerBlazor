@using System.Reflection.Metadata;

<div class="all-input-box">

    <form @onsubmit="AddNewRecipe">

       <div class="simple-input-box">
           <div class="one-input-box">
                <label for="RecipeName">Name</label>
                <input id="RecipeName" type="text" @bind="recipeName" required/>
           </div>

            <div class="one-input-box">
                <label for="RecipeDescription">Description</label>
                <textarea id="recipedescription" @bind="recipeDescription"/>
            </div>

            <div class="one-input-box">
                <label for="recipeCooktime">Cook Time</label>
                <input id="recipeCooktime" type="number" @bind="recipeCooktime" required/>
            </div>

            <div class="one-input-box">
                <label for="difficulty">Difficulty</label>
                <select id="difficulty" @bind="difficulty">
                    <option value="Easy">Easy</option>
                    <option value="Medium">Medium</option>
                    <option value="Hard">Hard</option>
                </select>
            </div>

            <div class="one-input-box">
                <label for="spicyness">spicyness (0-low / 5-very high)</label>
                <input id="spicyness" type="number" @bind="spicyness" max="5" min="1"/>
            </div>

            <div class="one-input-box">
                <label for="portions">Portions</label>
                <input id="portions" type="number" @bind="portions" max="100" min="1" required/>
            </div>

            <div class="one-input-box">
                <label for="type">Recipe Type</label>
                <select id="type" @bind="recipeType">
                    <option value="Breakfast">Breakfast</option>
                    <option value="Lunch">Lunch</option>
                    <option value="Dinner">Dinner</option>
                    <option value="Dessert">Dessert</option>
                    <option value="Snack">Snack</option>
                </select>
            </div>

            <div class="one-input-box input-check">
                <label for="isVegan">is vegan</label>
                <input id="isVegan" type="checkbox" @bind="isVegan" />
            </div>

       </div>

       <div class="ingr-and-steps-box">
            <div class="enter-ingredients-box">
                <h3>Ingredients</h3>
                <div class="see-ingr-box">
                    @if (ingredients != null && ingredients.Count > 0)
                    {
                        @foreach (var ingr in ingredients)
                        {
                            <div class="one-ingredient-box">
                                <h3 class="ingrName">@ingr.Name</h3>
                                <p class="ingrQuant">@ingr.Quantity @ingr.Unit</p>
                                <button type="button" @onclick="()=>RemoveIngredient(ingr)">Remove</button>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No ingredients added yet</p>
                    }
                </div>

                <div class="add-ingr-box">
                    <label for="newIngr">New Ingredient</label>
                    <input id="newIngr" type="text" @bind="ingrName" />

                    <label for="newIngrAmount">Amount</label>
                    <input id="newIngrAmount" type="number" step="0.01" @bind="ingrAmount" />

                    <label for="newIngrUnit">Unit</label>
                    <input id="newIngrUnit" type="text" @bind="ingrUnit" />

                    <button type="button" @onclick="addNewIngredient">Add</button>
                </div>
            </div>

            <div class="enter-steps-box">
                <h3>Steps</h3>
                <div class="see-steps-box">
                    @if (steps != null && steps.Count > 0)
                    {
                        foreach (var step in steps)
                        {
                            <div class="one-step-box">
                                <p>@step</p>
                                <button type="button" @onclick="()=>RemoveStep(step)">Remove</button>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No steps added yet</p>
                    }
                </div>
                <div class="add-steps-box">
                    <label for="stepsIN"></label>
                    <input id="stepsIN" type="text" @bind="stepsIN" />
                    <button type="button" @onclick="addNewSteps">Add</button>
                </div>
            </div>
       </div>
       

        <button type="submit">Add to list</button>
    </form>

</div>

@code {
    private string recipeName = "";
    private string recipeDescription = "";
    private int recipeCooktime = 1;
    private string difficulty = "Easy";
    private bool isVegan = false;
    private int spicyness = 1;
    private int portions = 1;
    private string recipeType = "Breakfast";

    private string ingrName = "";
    private double ingrAmount = 1;
    private string ingrUnit = "";
    private List<Ingredient> ingredients = new List<Ingredient>();
    private List<string> steps = new List<string>();

    private string stepsIN = "";

    [Parameter]
    public Recipe? RecipeToUpdate { get; set; }

    [Parameter]
    public List<Recipe>? recipes { get; set; }

    [Parameter]
    public Action<Recipe> OnAddNewRecipe { get; set; }

    [Parameter]
    public Action onToggleAddRecipe { get; set; }

    private void addNewIngredient()
    {
        Ingredient newIngr = new Ingredient()
        {
            Name = ingrName,
            Quantity = ingrAmount,
            Unit = ingrUnit
        };

        // add new ingredient to list
        ingredients.Add(newIngr);
        ingrName = "";
        ingrAmount = 0;
        ingrUnit = "";
    }

    private void addNewSteps()
    {
        //add steps data to the list of steps
        steps.Add(stepsIN);
        stepsIN = "";
    }

    private void RemoveStep(string stepName)
    {
        //remove step from the list of steps
        //use linq to remove the step from list of steps
        steps.Remove(stepName);
    }

    private void RemoveIngredient(Ingredient ingr)
    {
        ingredients.Remove(ingr);
    }

    protected override void OnInitialized()
    {
        @if (RecipeToUpdate != null)
        {

            recipeName = RecipeToUpdate.RecipeName;
            recipeDescription = RecipeToUpdate.Description;
            recipeCooktime = RecipeToUpdate.CookTime;
            difficulty = RecipeToUpdate.Difficulty.ToString();
            isVegan = RecipeToUpdate.IsVegan;
            spicyness = RecipeToUpdate.Spicyness;
            portions = RecipeToUpdate.Portions;
            recipeType = RecipeToUpdate.RecipeType.ToString();
            ingredients = RecipeToUpdate.Ingredients;
            steps = RecipeToUpdate.Steps;

           
        }
    }

    private void AddNewRecipe()
    {

        //get the difficulty enum with swtich statement 
        //add new recipe to the database
        Recipe newRecipe = new Recipe()
        {
            RecipeName = recipeName,
            Description = recipeDescription,
            CookTime = recipeCooktime,
            IsVegan = isVegan,
            Spicyness = spicyness,
            Ingredients = ingredients,
            Steps = steps,
            Portions = portions
        };

        switch (difficulty)
        {
            case "Easy":
                newRecipe.Difficulty = RecipeDifficulty.Easy;
                break;
            case "Medium":
                newRecipe.Difficulty = RecipeDifficulty.Medium;
                break;
            case "Hard":
                newRecipe.Difficulty = RecipeDifficulty.Hard;
                break;
            default:
                newRecipe.Difficulty = RecipeDifficulty.Easy;
                break;
        }

        //add switch case for recipe type
        switch (recipeType)
        {
            case "Breakfast":
                newRecipe.RecipeType = RecipeTypes.Breakfast;
                break;
            case "Lunch":
                newRecipe.RecipeType = RecipeTypes.Lunch;
                break;
            case "Dinner":
                newRecipe.RecipeType = RecipeTypes.Dinner;
                break;
            case "Dessert":
                newRecipe.RecipeType = RecipeTypes.Dessert;
                break;
            case "Snack":
                newRecipe.RecipeType = RecipeTypes.Snack;
                break;
            default:
                newRecipe.RecipeType = RecipeTypes.Breakfast;
                break;
        }

        OnAddNewRecipe?.Invoke(newRecipe);
        onToggleAddRecipe.Invoke();
        //i want to use the toggle visibility method here
    }


}
